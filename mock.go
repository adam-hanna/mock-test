// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=interface-mock.go -package=main
//

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIFoo is a mock of IFoo interface.
type MockIFoo struct {
	ctrl     *gomock.Controller
	recorder *MockIFooMockRecorder
}

// MockIFooMockRecorder is the mock recorder for MockIFoo.
type MockIFooMockRecorder struct {
	mock *MockIFoo
}

// NewMockIFoo creates a new mock instance.
func NewMockIFoo(ctrl *gomock.Controller) *MockIFoo {
	mock := &MockIFoo{ctrl: ctrl}
	mock.recorder = &MockIFooMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFoo) EXPECT() *MockIFooMockRecorder {
	return m.recorder
}

// Bar mocks base method.
func (m *MockIFoo) Bar() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bar")
	ret0, _ := ret[0].(int)
	return ret0
}

// Bar indicates an expected call of Bar.
func (mr *MockIFooMockRecorder) Bar() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bar", reflect.TypeOf((*MockIFoo)(nil).Bar))
}

// baz mocks base method.
func (m *MockIFoo) baz() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "baz")
}

// baz indicates an expected call of baz.
func (mr *MockIFooMockRecorder) baz() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "baz", reflect.TypeOf((*MockIFoo)(nil).baz))
}
